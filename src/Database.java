

import java.sql.*;
import java.util.LinkedList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author fen
 */
public class Database extends javax.swing.JFrame {


    protected static Connection connection;
    /**
     * Creates new form Database
     */
    public Database(Connection con) throws SQLException 
    {
        
        initComponents();
        this.setLocationRelativeTo(null);
        connection=con;
       
        fillTables();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbTables = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btnAddTable = new javax.swing.JButton();
        btnDelTable = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnView = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Choose Table");

        btnAddTable.setText("Add Table");
        btnAddTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTableActionPerformed(evt);
            }
        });

        btnDelTable.setText("Delete Table");
        btnDelTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelTableActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cbTables, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddTable, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(btnDelTable)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTables, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddTable)
                    .addComponent(btnDelTable)
                    .addComponent(btnExit))
                .addGap(84, 84, 84))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        
        String query = "select * from "+cbTables.getSelectedItem();
        
        try
        {         
        PreparedStatement pst = connection.prepareStatement(query);
        ResultSet rs=pst.executeQuery();
        View ve=new View(rs);
        ve.setVisible(true);
        
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnAddTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTableActionPerformed
        // TODO add your handling code here:
        NewTable addTable=new NewTable();
        addTable.setVisible(true);
    }//GEN-LAST:event_btnAddTableActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
      
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnDelTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelTableActionPerformed
        try {
            // TODO add your handling code here:
            int response= JOptionPane.showConfirmDialog(null, "Are you sure to delete table? ","Confirm",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(response==JOptionPane.YES_OPTION)
            {
            String query="DROP TABLE "+cbTables.getSelectedItem();
            Statement st= connection.createStatement();
            st.executeUpdate(query);
            fillTables();
            }
        }
        catch (SQLException ex)
        {       
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnDelTableActionPerformed

    /**
     * @param args the command line arguments
     */
/*
    private static Connection getConnection()
    {
     Connection con=null;
     try
     {
         con=DriverManager.getConnection("jdbc:mysql://localhost:3306/tal",user,password);
         return con;
     }
     catch(SQLException e)
     {
     //for(Throwable t:e)
        //e.printStackTrace();
     JOptionPane.showMessageDialog(null, "Incorrect user name or password");
     return null;
      }
    }
*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTable;
    private javax.swing.JButton btnDelTable;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnView;
    public static javax.swing.JComboBox cbTables;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    

    protected static LinkedList getTableNames() throws SQLException
    {
        DatabaseMetaData dbmd = connection.getMetaData();
        ResultSet res = dbmd.getTables(null, null, null,new String[] {"TABLE"});
        LinkedList tableNames=new LinkedList<>();
        while(res.next())
        {
            tableNames.add(res.getString("TABLE_NAME"));
        
        }
        return tableNames;
    }
    
    protected static String[] getColumnNames(String tableName) throws SQLException
    {
        Statement stmt=connection.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM "+tableName);
        ResultSetMetaData rsmd = rs.getMetaData();
        int columnCount=rsmd.getColumnCount();
        String [] columnNames=new String[columnCount];
        for(int i=0;i<columnCount;i++)
        {
            columnNames[i] = rsmd.getColumnName(i+1);
        }
        return columnNames;
    }
    
    public static ResultSetMetaData getMetaData()
    {
        try {
            Statement st=connection.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM "+(String)cbTables.getSelectedItem());
            ResultSetMetaData metaData = rs.getMetaData();
            return metaData;
        } catch (SQLException ex)
        {
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    protected static void fillTables() throws SQLException
    {
        LinkedList tables=getTableNames();
        cbTables.removeAllItems();
        for(int i=0;i<tables.size();i++)
        {
            cbTables.addItem(tables.get(i));
        }
    }
}
