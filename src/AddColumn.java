

import java.sql.SQLException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author fen
 */
public class AddColumn extends javax.swing.JFrame {

    /**
     * Creates new form AddColumn
     */
   
    private LinkedList tables;
    public AddColumn() throws SQLException
    {
        initComponents();
        this.setLocationRelativeTo(null);
        tables=Database.getTableNames();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txfColumnName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbTypes = new javax.swing.JComboBox();
        ckbPrimaryKey = new javax.swing.JCheckBox();
        ckbNull = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        cbForeignKeyRF = new javax.swing.JComboBox();
        ckbForeignKey = new javax.swing.JCheckBox();
        cbRefColumns = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        txfM = new javax.swing.JTextField();
        txfN = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txfSize = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Coulumn Name: ");

        jLabel2.setText("Column Type:");

        cbTypes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "VARCHAR", "INT", "DATE", "DECIMAL(M,N)" }));
        cbTypes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTypesItemStateChanged(evt);
            }
        });

        ckbPrimaryKey.setText("Primary key");
        ckbPrimaryKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbPrimaryKeyActionPerformed(evt);
            }
        });

        ckbNull.setText("Null");
        ckbNull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbNullActionPerformed(evt);
            }
        });

        cbForeignKeyRF.setEnabled(false);
        cbForeignKeyRF.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbForeignKeyRFItemStateChanged(evt);
            }
        });

        ckbForeignKey.setText("Foreign key");
        ckbForeignKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbForeignKeyActionPerformed(evt);
            }
        });

        cbRefColumns.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(ckbForeignKey)
                .addGap(38, 38, 38)
                .addComponent(cbForeignKeyRF, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(cbRefColumns, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbForeignKeyRF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckbForeignKey)
                    .addComponent(cbRefColumns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        txfM.setEnabled(false);

        txfN.setEnabled(false);

        jLabel3.setText("M: ");

        jLabel4.setText("N: ");

        jLabel5.setText("Size");

        txfSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfSizeKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ckbPrimaryKey)
                                        .addGap(86, 86, 86)
                                        .addComponent(ckbNull))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(24, 24, 24)
                                            .addComponent(txfColumnName, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel5))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(cbTypes, 0, 124, Short.MAX_VALUE)
                                                .addComponent(txfSize)))))
                                .addGap(43, 43, 43)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txfM, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txfN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfColumnName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfM, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(txfSize, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbPrimaryKey)
                    .addComponent(ckbNull))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ckbNullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbNullActionPerformed
        // TODO add your handling code here:
        if(ckbNull.isSelected())
            ckbPrimaryKey.setEnabled(false);
        else
            ckbPrimaryKey.setEnabled(true);
    }//GEN-LAST:event_ckbNullActionPerformed

    private void cbTypesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTypesItemStateChanged
        // TODO add your handling code here:
        String selectedType=(String)cbTypes.getSelectedItem();
        if(selectedType.equalsIgnoreCase("DECIMAL(M,N)"))
        {
            txfM.setEnabled(true);
            txfN.setEnabled(true);
        }
        else
        {
            txfM.setEnabled(false);
            txfN.setEnabled(false);
        }
        if(selectedType.equalsIgnoreCase("char") || selectedType.equalsIgnoreCase("Varchar"))
            txfSize.setEnabled(true);
        else
            txfSize.setEnabled(false);
    }//GEN-LAST:event_cbTypesItemStateChanged

    private void ckbPrimaryKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbPrimaryKeyActionPerformed
        // TODO add your handling code here:
        
        if(ckbPrimaryKey.isSelected())
        {
            ckbNull.setEnabled(false);
            
        }
        else
        {
            ckbNull.setEnabled(true);
        }
            
    }//GEN-LAST:event_ckbPrimaryKeyActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
         
             
        String info="";

        if(inputValid())
        {
            if(cbForeignKeyRF.isEnabled() && cbRefColumns.isEnabled()&& ckbForeignKey.isSelected() )
            {
                NewTable.foreignKeys.add(txfColumnName.getText());
                NewTable.foreignKeysRFTable.add((String)cbForeignKeyRF.getSelectedItem());
                NewTable.foreignKeysRFcolumn.add((String)cbRefColumns.getSelectedItem());
            }

            if(ckbPrimaryKey.isSelected())
            {
                NewTable.primaryKeys.add(txfColumnName.getText());
            }

            info+=txfColumnName.getText()+" "+cbTypes.getSelectedItem();
            
            if(txfM.isEnabled())
                info+="("+txfM.getText()+","+txfN.getText()+")";
            if(txfSize.isEnabled())
                info+="("+txfSize.getText()+")";
            if(ckbNull.isEnabled()&& !ckbNull.isSelected())
                info+=" NOT NULL " ;
            NewTable.model.addElement(info);
            NewTable.listColums.setModel(NewTable.model);

            if(NewTable.primaryKeys.size()>0)
            {
                String txtPr="";
                for(int i=0;i<NewTable.primaryKeys.size();i++)
                {
                    if(i!=0)
                        txtPr+=",";
                    txtPr+=NewTable.primaryKeys.get(i);   
                }
                NewTable.txfPrimaryKey.setText(txtPr);
            }

            if(NewTable.foreignKeys.size()>0)
            {
                String txtFr="";
                for(int k=0;k<NewTable.foreignKeys.size();k++)
                {
                    txtFr+="\n"+NewTable.foreignKeys.get(k)+" REFERENCES "+NewTable.foreignKeysRFTable.get(k)+" ("+ NewTable.foreignKeysRFcolumn.get(k) +")";
                }
                 NewTable.txfForeignKey.setText(txtFr);
            }

        NewTable.createdColumnNames.add(txfColumnName.getText());
        this.dispose();
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void ckbForeignKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbForeignKeyActionPerformed
        // TODO add your handling code here:
        if(ckbForeignKey.isSelected())
        {
            try {
                cbForeignKeyRF.setEnabled(true);
                cbRefColumns.setEnabled(true);
                
                cbForeignKeyRF.removeAllItems();;
                for(int i=0;i<tables.size();i++)
                {
                    cbForeignKeyRF.addItem(tables.get(i));
                }
                cbRefColumns.removeAllItems(); 
                String [] referColumnNames=Database.getColumnNames((String)cbForeignKeyRF.getSelectedItem());
                   
                for(int i=0;i< referColumnNames.length;i++)
                {
                    cbRefColumns.addItem(referColumnNames[i]);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddColumn.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            cbForeignKeyRF.setEnabled(false);
            cbRefColumns.setEnabled(false);         
        }
    }//GEN-LAST:event_ckbForeignKeyActionPerformed

    private void cbForeignKeyRFItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbForeignKeyRFItemStateChanged
        try {
            cbRefColumns.removeAllItems();
            
            String [] referColumnNames=Database.getColumnNames((String)cbForeignKeyRF.getSelectedItem());
            
            for(int i=0;i< referColumnNames.length;i++)
            {
                cbRefColumns.addItem(referColumnNames[i]);
            }
        } 
        catch (SQLException ex) {
            Logger.getLogger(AddColumn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbForeignKeyRFItemStateChanged

    private void txfSizeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfSizeKeyTyped
        char txt=evt.getKeyChar();
        if( txt!='1'&& txt!='2'&& txt!='3'&& txt!='4'&& txt!='5'&& txt!='6'&& txt!='7'&& txt!='8'&& txt!='9'&& txt!='0')
            evt.consume();
    }//GEN-LAST:event_txfSizeKeyTyped

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JComboBox cbForeignKeyRF;
    private javax.swing.JComboBox cbRefColumns;
    private javax.swing.JComboBox cbTypes;
    private javax.swing.JCheckBox ckbForeignKey;
    private javax.swing.JCheckBox ckbNull;
    private javax.swing.JCheckBox ckbPrimaryKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txfColumnName;
    private javax.swing.JTextField txfM;
    private javax.swing.JTextField txfN;
    private javax.swing.JTextField txfSize;
    // End of variables declaration//GEN-END:variables

    private boolean inputValid() 
    {
        if(txfColumnName.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Column Name Field can not be empty. ", "Invalid Input.", JOptionPane.ERROR_MESSAGE);
            txfColumnName.requestFocusInWindow();
            return false;
        }
        if(NewTable.createdColumnNames.contains(txfColumnName.getText()))
        {
            JOptionPane.showMessageDialog(this, "Column Name Field can not be Same. ", "Invalid Input.", JOptionPane.ERROR_MESSAGE);
            txfColumnName.requestFocusInWindow();
            return false;
        }
        if(txfM.isEnabled() && txfN.isEnabled())
        {
            if(txfM.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(this, "M can not be empty. ", "Invalid Input.", JOptionPane.ERROR_MESSAGE);
                txfM.requestFocusInWindow();
                return false;
            }
            if(txfN.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(this, "N can not be empty. ", "Invalid Input.", JOptionPane.ERROR_MESSAGE);
                txfN.requestFocusInWindow();
                return false;
            }
        }
        
        
        if(txfSize.isEnabled())
        {
            if(txfSize.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(this, "Size Field can not be empty. ", "Invalid Input.", JOptionPane.ERROR_MESSAGE);
                txfSize.requestFocusInWindow();
                return false;
            }
            
        }
  
        return true;
    }
}
