
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author fen
 */
public class View extends javax.swing.JFrame {

    /**
     * Creates new form View
     */
    
    private String[] columnNames;
    public View(ResultSet rs) throws SQLException {
        initComponents();
        this.setLocationRelativeTo(null);
        table.setModel(resultsetToTableModel(rs));
        columnNames=Database.getColumnNames((String)Database.cbTables.getSelectedItem());
      //Fill update condition combobox ,objective combobox, and search field comboboxs
        for(int i=0;i<columnNames.length;i++)
        {
            cbCondition.addItem(columnNames[i]);
            cbObjective.addItem(columnNames[i]);
            cbSearch1.addItem(columnNames[i]);
            cbSearch2.addItem(columnNames[i]);
            cbSearch3.addItem(columnNames[i]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        btnEditRow = new javax.swing.JButton();
        btnAddRow = new javax.swing.JButton();
        btnDelRow = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnUpdate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbCondition = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        txfCondition = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbObjective = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        txfObjective = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        txfSearch1 = new javax.swing.JTextField();
        cbSearch2 = new javax.swing.JComboBox();
        cbSearch3 = new javax.swing.JComboBox();
        txfSearch2 = new javax.swing.JTextField();
        txfSearch3 = new javax.swing.JTextField();
        cbSearch1 = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbSearch = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnEditRow.setText("Select a Single Row and Click on Button To Edit Row");
        btnEditRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditRowActionPerformed(evt);
            }
        });

        btnAddRow.setText("Add Row");
        btnAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRowActionPerformed(evt);
            }
        });

        btnDelRow.setText("Del Rows");
        btnDelRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelRowActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tableFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Update In Groups"));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel1.setText("Condition: ");

        jLabel2.setText("=");

        jLabel3.setText("Objective:");

        jLabel4.setText("=");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbObjective, 0, 115, Short.MAX_VALUE)
                    .addComponent(cbCondition, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfObjective))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(61, 61, 61)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(212, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txfCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbObjective, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfObjective, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Search By:"));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cbSearch3, 0, 83, Short.MAX_VALUE)
                    .addComponent(cbSearch2, 0, 83, Short.MAX_VALUE)
                    .addComponent(cbSearch1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txfSearch1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfSearch3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txfSearch1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfSearch3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbSearch3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        tbSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tbSearch);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnEditRow, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(58, 58, 58)
                            .addComponent(btnAddRow)
                            .addGap(82, 82, 82)
                            .addComponent(btnDelRow)
                            .addGap(64, 64, 64))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditRow, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddRow, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelRow, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        int response= JOptionPane.showConfirmDialog(null, "Are you sure to Update the record? ","Confirm",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(response==JOptionPane.YES_OPTION)
        {
            try
            {
                ResultSetMetaData metaData = Database.getMetaData();

                String query ="UPDATE "+(String)Database.cbTables.getSelectedItem()+" SET ";
                
                if(metaData.getColumnType(cbCondition.getSelectedIndex()+1)==Types.CHAR  || metaData.getColumnType(cbCondition.getSelectedIndex()+1)==Types.DATE )
                    query+=cbObjective.getSelectedItem()+" = '"+txfObjective.getText()+"'";
                else
                    query+=cbObjective.getSelectedItem()+" = "+txfObjective.getText();
                if(metaData.getColumnType(cbObjective.getSelectedIndex()+1)==Types.CHAR || metaData.getColumnType(cbObjective.getSelectedIndex()+1)==Types.DATE)
                    query+="WHERE "+(String)cbCondition.getSelectedItem()+" = '"+txfCondition.getText()+"'";
                else 
                    query+="WHERE "+(String)cbCondition.getSelectedItem()+" = "+txfCondition.getText();

                Statement st=Database.connection.createStatement();
                st.executeUpdate(query);

                ResultSet rs=st.executeQuery("SELECT * FROM "+(String)Database.cbTables.getSelectedItem());
                table.setModel(resultsetToTableModel(rs));
            }
            catch (SQLException ex)
            {
                JOptionPane.showMessageDialog(this,ex+ "Operation Failed.");
            }
        } 
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableFocusGained
        try {
            // TODO add your handling code here:
            Statement st=Database.connection.createStatement();
            ResultSet rs=st.executeQuery("SELECT * FROM "+(String)Database.cbTables.getSelectedItem());
            table.setModel(resultsetToTableModel(rs));
        }
        catch (SQLException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tableFocusGained

    private void btnDelRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelRowActionPerformed
        try {
            // TODO add your handling code here:
            int response= JOptionPane.showConfirmDialog(null, "Are you sure to delete the record? ","Confirm",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(response==JOptionPane.YES_OPTION)
            {
            DefaultTableModel model=(DefaultTableModel)table.getModel();

            ResultSetMetaData metaData = Database.getMetaData();

            Statement st=Database.connection.createStatement();

            int count=table.getColumnCount();
            int [] rowNum=table.getSelectedRows();
            for(int k=0;k<rowNum.length;k++)
            {
                String query="DELETE FROM "+(String)Database.cbTables.getSelectedItem()+" WHERE ";

                for(int i=0;i<count;i++)
                {

                    if(model.getValueAt(table.getSelectedRow(), i)!=null)
                    {
                        if(i!=0)
                        query+=" AND ";
                        if(metaData.getColumnType(i+1)==Types.CHAR || metaData.getColumnType(i+1)==Types.DATE )
                            query+=table.getColumnName(i)+" = '"+model.getValueAt(rowNum[k]-k, i)+"'";
                        else
                            query+=table.getColumnName(i)+" = "+model.getValueAt(rowNum[k]-k, i);

                    }

                }

                model.removeRow(rowNum[k]-k);

                st.executeUpdate(query);
            }
            ResultSet rs=st.executeQuery("SELECT * FROM "+(String)Database.cbTables.getSelectedItem());
            table.setModel(resultsetToTableModel(rs));
            }

        }
        catch (SQLException ex)
        {
            JOptionPane.showMessageDialog(this, "Operation Failed. Try Again.");
        }

    }//GEN-LAST:event_btnDelRowActionPerformed

    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed
        // TODO add your handling code here:
        Row newRow;
        try {
            newRow = new Row();
            newRow.setVisible(true);
            newRow.setLocationRelativeTo(null);
        } catch (SQLException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAddRowActionPerformed

    private void btnEditRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditRowActionPerformed
        // TODO add your handling code here:
        EditRow editRow;

        int count=table.getColumnCount();
        Object [][] oldColumnValues=new Object[1][ count];
        Object [] columnName=new String[count];
        for(int i=0;i<count;i++)
        {
            columnName[i]=table.getColumnName(i);
            oldColumnValues [0][i]=(Object)table.getValueAt(table.getSelectedRow(),i);
        }
        editRow = new EditRow(oldColumnValues,columnName);
        editRow.setVisible(true);
        editRow.setLocationRelativeTo(null);
    }//GEN-LAST:event_btnEditRowActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
      
       ResultSetMetaData metaData = Database.getMetaData();
      
        String query= " SELECT * FROM "+Database.cbTables.getSelectedItem()+" WHERE ";
      
        if(!txfSearch1.getText().isEmpty())
        {
           try {
               if(metaData.getColumnType(cbSearch1.getSelectedIndex()+1)==Types.CHAR || metaData.getColumnType(cbSearch1.getSelectedIndex()+1)==Types.DATE)
                   query+=cbSearch1.getSelectedItem()+" = '"+txfSearch1.getText()+"'";
               else
                   query+=cbSearch1.getSelectedItem()+" = "+txfSearch1.getText();
           } catch (SQLException ex) {
               Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
           }
            
        }
            
        if(!txfSearch2.getText().isEmpty())
        {
            if(txfSearch1.getText()!="")
                query+=" AND ";
           try {
               if(metaData.getColumnType(cbSearch2.getSelectedIndex()+1)==Types.CHAR || metaData.getColumnType(cbSearch2.getSelectedIndex()+1)==Types.DATE)
                   query+=cbSearch2.getSelectedItem()+" = '"+txfSearch2.getText()+"'";
               else
                   query+=cbSearch2.getSelectedItem()+" = "+txfSearch2.getText();
           } 
           catch (SQLException ex) {
               Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
           }
           
        }
        if(!txfSearch3.getText().isEmpty())
        {
            if(txfSearch1.getText()!="" || txfSearch2.getText()!="" )
                query+=" AND ";
            try {
               if(metaData.getColumnType(cbSearch3.getSelectedIndex()+1)==Types.CHAR || metaData.getColumnType(cbSearch3.getSelectedIndex()+1)==Types.DATE)
                   query+=cbSearch3.getSelectedItem()+" = '"+txfSearch3.getText()+"'";
               else
                   query+=cbSearch3.getSelectedItem()+" = "+txfSearch3.getText();
           } catch (SQLException ex) {
               Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        }
        
        
        try 
        {
            Statement st =Database.connection.createStatement();
            ResultSet rs=st.executeQuery(query);
            tbSearch.setModel(resultsetToTableModel(rs));
        } 
        catch (SQLException ex)
        {
            JOptionPane.showMessageDialog(this, ex+" \nSearch Failed. ", "Error Message", ERROR_MESSAGE);
        }
      
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */

    public static DefaultTableModel resultsetToTableModel(ResultSet rs) throws SQLException
    {
        
        ResultSetMetaData metaData=rs.getMetaData();
        int numColumns= metaData.getColumnCount();
        
        Vector<String> columnName=new Vector<String>();
        Vector<Vector <Object>> rows=new Vector<>();
        
        for(int i=1;i<=numColumns;i++)
        {
            columnName.add(metaData.getColumnLabel(i));
         }
        
                  
        while(rs.next())
        {
            Vector<Object> newRow=new Vector<Object>();
            
             for (int i = 1; i <= numColumns; i++)
             {
              newRow.add(rs.getObject(i));
             }
             rows.add(newRow);
        }
         
        return new DefaultTableModel(rows, columnName);
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRow;
    private javax.swing.JButton btnDelRow;
    private javax.swing.JButton btnEditRow;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cbCondition;
    private javax.swing.JComboBox cbObjective;
    private javax.swing.JComboBox cbSearch1;
    private javax.swing.JComboBox cbSearch2;
    private javax.swing.JComboBox cbSearch3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    public static javax.swing.JTable table;
    private javax.swing.JTable tbSearch;
    private javax.swing.JTextField txfCondition;
    private javax.swing.JTextField txfObjective;
    private javax.swing.JTextField txfSearch1;
    private javax.swing.JTextField txfSearch2;
    private javax.swing.JTextField txfSearch3;
    // End of variables declaration//GEN-END:variables
}
